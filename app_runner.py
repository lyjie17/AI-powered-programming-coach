import streamlit as st
import streamlit_ace
from learning_platform import ProgrammingLearningPlatform


# update lesson index for previous and next lesson buttons
def update_lesson_index(offset):
    st.session_state.current_lesson_index += offset
    

# launch the Streamlit app
def main():
    st.title("ðŸš€AI-powered Programming Learning Platform")

    # intiliaze learning platform if not already
    if 'learning_platform' not in st.session_state:
        st.session_state.learning_platform = ProgrammingLearningPlatform()

    # sidebar for user input
    with st.sidebar:
        st.header("Personalize Your Learning Path")

        language = st.selectbox(
            "Choose Programming Language", 
            ["Python", "JavaScript", "Java", "C++"]
        )

        current_knowledge = st.selectbox(
            "Your Current Programming Knowledge",
            ["Beginner", "Intermediate", "Advanced"]
        )

        learning_goals = st.text_input(
            "Your Learning Goals",
            placeholder="E.g., Learn basic programming, create simple apps"
        )

        if st.button("Generate Learning Path"):
            learning_path = st.session_state.learning_platform.generate_learning_path(
                current_knowledge, 
                learning_goals, 
                language
            )
            # print(learning_path)
            if learning_path:
                st.session_state.learning_path = learning_path
                st.session_state.current_lesson_index = 0
                # st.session_state["current_lesson_index"] = 0
                st.success("Learning path generated successfully!")

    if 'learning_path' in st.session_state:
        lessons = st.session_state.learning_path.get('lessons', [])

        # load current lesson from learning path generated by AI
        if lessons:
            current_lesson_index = st.session_state.current_lesson_index
            # print("curr lesson: " + str(current_lesson_index))
            current_lesson = lessons[current_lesson_index]

            st.header(f"Lesson {current_lesson_index + 1}: {current_lesson['title']}")
            st.write(f"**Objective:** {current_lesson['objective']}")

            st.subheader("Explanation")
            st.write(current_lesson['explanation'])

            st.subheader("Example Code")
            st.code(current_lesson['example_code'], language=language.lower())

            st.subheader("Coding Exercise")
            st.write(current_lesson['coding_exercise'])

            # code ide for user to write and run code
            code = streamlit_ace.st_ace(
                language=st.session_state.learning_platform.execution_environments[language]['ace_mode'],
                theme="monokai",
                height=300,
                key=f"code_editor_{current_lesson_index}"
            )

            # run and get feedback for user code
            if st.button("Run Code"):
                runner = st.session_state.learning_platform.execution_environments[language]['runner']
                output, error = runner(code)

                if error:
                    st.error(f"Execution Error:\n{error}")
                else:
                    st.success("Code Executed Successfully")
                    st.code(output, language="text")

            if st.button("Get Feedback from AI"):
                feedback = st.session_state.learning_platform.get_ai_feedback(
                    language, 
                    code, 
                    current_lesson['objective'],
                    current_lesson['coding_exercise']
                )

                st.write(feedback)

            st.markdown("---")
            # add previous and next lesson buttons
            col_prev, col_next = st.columns(2)
            with col_prev:
                if current_lesson_index > 0:
                    st.button("Previous Lesson", on_click=update_lesson_index, args=(-1,))

            with col_next:
                if current_lesson_index < len(lessons) - 1:
                    st.button("Next Lesson", on_click=update_lesson_index, args=(1,))


if __name__ == "__main__":
    main()
